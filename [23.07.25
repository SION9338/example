[자료구조]

큐(Queue)

큐는 First-In-First-Out (FIFO) 데이터 구조로, 먼저 추가된 요소가 먼저 제거됩니다.
좋은 예로 은행에 있는 번호표를 들 수 있습니다. 이러한 은행의 번호표의 체계가 큐(Queue)입니다.

- 스택(Stack)과 차이점은?
스택(Stack)은 Last-In-First-Out (LIFO) 데이터 구조로, 마지막에 추가된 요소가 처음으로 제거됩니다.
쉽게 이해하려면 좋은 예시로, 쌓여 있는 접시 중 마지막 위에 쌓여 있는 것부터 사용하는 것을 예로 들 수 있습니다.



- 번호표 기계도 프로그래밍으로 구현된 하나의 프로그램인데, 1번부터 확인하면서 이 손님이 서비스를 받았는지 안 받았는지 확인하며 다음으로 호출할 번호를 정한다면 너무 비효율적입니다. 단순하게 생각하면 서비스를 받을 처음 위치와 마지막의 위치만 기억하면 모든 게 쉽게 풀립니다. 이 위치들을 큐(Queue)에서는 front, rear합니다.



- 위 그림을 보면 Deletion(삭제), Insertion(삽입)이라는 용어가 있습니다. 이 용어보다는 많은 사람들이 Dequeue, Enqueue라는 용어를 사용합니다. Enqueue는 위 그림에서 Insertion과 같습니다. 마지막으로 온 손님에게 번호표를 주는 것이죠. 그럼 Dequeue는 서비스를 받은 번호표는 대기목록에서 지우는 것입니다. 그래야 다음으로 호출할 번호를 알 수가 있죠.
→  Enqueue는 위 그림에서 Insertion과 같고, Dequeue는 위 그림의 Deletion과 같다.

정리를 해보면?

**(1) Enqueue** : 큐 맨 뒤에 어떠한 요소를 추가, **마지막으로 온 손님에게 번호표 발부**

**(2) Dequeue** : 큐 맨 앞쪽의 요소를 삭제, **창구에서 서비스를 받은 손님의 번호표를 대기목록에서 삭제**

**(3) Peek** : front에 위치한 데이터를 읽음, **다음 서비스를 받을 손님이 누구인지 확인**

**(4) front** : 큐의 맨 앞의 위치(인덱스), **다음 서비스를 받을 손님의 번호**

**(5) rear** : 큐의 맨 뒤의 위치(인덱스), **마지막에 온 손님의 번호**
------------------------------------------------------
[과제]
단어 뒤집기
//문자열 input의 각 문자를 뒤집어서 반환하는 함수를 완성하세요.(스택활용)
ex1)reverseWord("hi")=="ih"
ex2)reverseWord("easy")=="ysae"
fun reverseWord(input.String):String{}
------------------------------------------------------
[변수+함수]
입력받은 A,B의 사칙연산 결과를 String으로 전환해서 반환하는 함수

fun main(){
    val a = 1
    val b = 2
    val sum1 = add(a,b)
    val sum2 = sub(a,b)
    val sum3 = multi(a,b)
    val sum4 = quo(a,b)
    val sum5 = remain(a,b)
    println("덧셈: $sum1, 뺄셈: $sum2, 곱셈: $sum3, 나눗셈 몫: $sum4, 나눗셈 나머지: $sum5")
}
fun add(a: Int, b: Int): String {
    return "${a + b}"
}
fun sub(a: Int, b: Int): String {
    return "${a - b}"
}
fun multi(a: Int, b: Int): String {
    return "${a * b}"
}
fun quo(a: Int, b: Int): String {
    return "${a / b}"
}
fun remain(a: Int, b: Int): String {
    return "${a % b}"
}

[리스트]
저장된 리스트에서 0을 포함해 짝수 index (0, 2, 4...) 값을 모두 출력
ex) listOf("a","b","c","d") -> "a", "c"

fun main(){
    val list = listOf("a", "b", "c", "d", "e", "f")
    val result = mutableListOf<String>()
    
    for (i in list.indices){
        if (i % 2 ==0) {
            result.add(list[i])
        }
    }
    println(result)
}

[리스트]
저장된 리스트에서 홀수 index (1, 3, 5...) 값을 모두 출력
ex) listOf("a","b","c","d") -> "b", "d"

fun main(){
    val list = listOf("a", "b", "c", "d", "e", "f")
    val result = mutableListOf<String>()
    
    for (i in list.indices){
        if (i % 2 ==1) {
            result.add(list[i])
        }
    }
    println(result)
}

[조건문]
"월", "화", "수", "목", "금", "토", "일" 중 하루를 입력받으면 '내일'의 요일을 출력


[조건문]
"월", "화", "수", "목", "금", "토", "일" 중 하루를 입력받으면 '어제'의 요일을 출력
